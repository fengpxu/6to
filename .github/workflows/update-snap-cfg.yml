name: update-snap-cfg
# env:
#   name: staging_environment

# concurrency: staging_environment

on:
  schedule:
    - cron: "30 11 * * *"
  pull_request:
  push:
    paths:
      - "developer/**"
      - "**/update-snap-cfg.yml"
      - "release.json"
    branches: [main]

jobs:
  nightly_job:
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message , 'skip workflow')"
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [16]
      fail-fast: false
    environment:
      name: CICD
    env:
      NODE_AUTH_TOKEN: ${{ secrets.PAT }}
      GITHUB_PAT: ${{ secrets.PAT }}
    steps:
      - name: Get short SHA üîë
        id: sha
        run: |
          echo "sha7=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Checkout ${{ steps.sha.outputs.sha7 }} ‚¨áÔ∏è
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: main

      - name: Get app name
        id: slug
        run: |
          DISPLAYNAME=$(cat developer/app.js | perl -wnE"say for /(?<=displayName\:\s)\'?.*\'?(?=,)/gm")
          APPNAME=$(cat developer/app.js | perl -wnE"say for /(?<=const\sAPP\s=\s\')[a-zA-Z]+/gm")
          FILENAME=$(cat developer/app.js | perl -wnE"say for /(?<=fileName\:\s)\'?.*\'?(?=,)/gm")
          echo ${APPNAME}
          echo ${DISPLAYNAME}
          echo ${FILENAME}
          echo "app-name=${APPNAME}" >> $GITHUB_OUTPUT
          echo "app-name-lower=$(echo ${APPNAME} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          if [[ ${DISPLAYNAME} = "APP" ]] ; \
          then  echo "display-name=${APPNAME}" >> $GITHUB_OUTPUT ; \
            echo "display-name-lower=$(echo ${APPNAME} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT ; \
          else  DISPLAYNAME=$(echo ${DISPLAYNAME} | sed "s/'//g") ; \
            echo "display-name=${DISPLAYNAME}" >> $GITHUB_OUTPUT ; \
            echo "display-name-lower=$(echo ${DISPLAYNAME} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT ; \
          fi
          if [[ ${FILENAME} = "APP" ]] ; \
          then  echo "file-name=${APPNAME}" >> $GITHUB_OUTPUT ; \
            echo "file-name-lower=$(echo ${APPNAME} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT ; \
          else  FILENAME=$(echo ${FILENAME} | sed "s/'//g") ; \
            echo "file-name=${FILENAME}" >> $GITHUB_OUTPUT ; \
            echo "file-name-lower=$(echo ${FILENAME} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT ; \
          fi
        shell: bash

      - name: Setup Node.js ${{ matrix.node-version }} üìÆ
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"
          registry-url: "https://npm.pkg.github.com"
          scope: "@zeeis"

      - name: Get message
        id: vars
        run: |
          echo "date=$(TZ=UTC-8 git log -1 --date=format-local:"%Y%m%d%H%M" --format="%cd")" >> $GITHUB_OUTPUT
          echo "event-name=${{ github.event_name }}" >> $GITHUB_OUTPUT
          echo "download-tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
          if [[ ${{ matrix.os }} = "ubuntu-latest" ]] ; \
          then echo "system=ubuntu" >> $GITHUB_OUTPUT ; \
            echo "package=${{ steps.slug.outputs.display-name }}-linux-x64" >> $GITHUB_OUTPUT ; \
          elif [[ ${{ matrix.os }} = "macos-latest" ]] ; \
          then echo "system=macos" >> $GITHUB_OUTPUT ; \
            echo "package=${{ steps.slug.outputs.display-name }}-darwin-x64" >> $GITHUB_OUTPUT ; \
          elif [[ ${{ matrix.os }} = "windows-latest" ]] ; \
          then echo "system=windows" >> $GITHUB_OUTPUT ; \
            echo "package=${{ steps.slug.outputs.display-name }}-win32-x64" >> $GITHUB_OUTPUT ; \
          fi
          export COMMIT_HEAD=$(git log -1 --pretty=%B | perl -wnE'say for /^\w+/gm')
          if [[ "$COMMIT_HEAD" = "Merge" ]] ; \
          then export MODIFIED_FILE_LIST=$(git show --pretty="format:" --name-only -2) ; \
          else export MODIFIED_FILE_LIST=$(git show --pretty="format:" --name-only) ; \
          fi
          echo "MODIFIED_FILE_LIST<<EOF" >> $GITHUB_ENV
          echo "$MODIFIED_FILE_LIST" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        shell: bash
      
      - name: Get release.json property
        id: release
        if: contains(env.MODIFIED_FILE_LIST, 'release.json')
        run: |
          CONTENT=$(cat ./release.json)
          TARGET_TAG_NAME=$(echo "$CONTENT" | perl -wnE"say for /(?<=targetTagName\"\:\s\").*(?=\",)/gm")
          NEW_TAG_NAME=$(echo "$CONTENT" | perl -wnE"say for /(?<=newTagName\"\:\s\").*(?=\")/gm")
          echo "target-tag-name=${TARGET_TAG_NAME}"
          echo "new-tag-name=${NEW_TAG_NAME}"
          echo "target-tag-name=${TARGET_TAG_NAME}" >> $GITHUB_OUTPUT
          echo "new-tag-name=${NEW_TAG_NAME}" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Unified Tag format
        if: contains(steps.vars.outputs.event-name, 'schedule') || contains(env.MODIFIED_FILE_LIST, 'release.json')
        id: unify
        run: |
          if ${{ contains(env.MODIFIED_FILE_LIST, 'release.json') }} ; \
          then echo "tag-name=${{ steps.release.outputs.new-tag-name }}" >> $GITHUB_OUTPUT ; \
            if ${{ contains(steps.release.outputs.new-tag-name, 'nightly') }} ; \
            then echo "release-name=$(echo '${{ steps.release.outputs.new-tag-name }}' | perl -wnE'say for /^\d+\.\d+\.\d+\-?\w*/g' )-${{ steps.nightly.outputs.commit-sha7 }}" >> $GITHUB_OUTPUT ; \
            else echo "release-name=${{ steps.release.outputs.new-tag-name }}" >> $GITHUB_OUTPUT ; \
            fi
            echo "package-name=${{ steps.release.outputs.new-tag-name }}" >> $GITHUB_OUTPUT ; \
          else echo "tag-name=${{ steps.unstable.outputs.unstable-version }}-nightly-${{ steps.vars.outputs.date }}" >> $GITHUB_OUTPUT ; \
            echo "release-name=${{ steps.unstable.outputs.unstable-version }}-nightly-${{ steps.nightly.outputs.commit-sha7 }}" >> $GITHUB_OUTPUT ;  \
            echo "package-name=${{ steps.unstable.outputs.unstable-version }}-nightly-${{ steps.vars.outputs.date }}" >> $GITHUB_OUTPUT ; \
          fi
        shell: bash

      - name: Install dependencies üë®üèª‚Äçüíª
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 600
          max_attempts: 2
          shell: bash
          retry_on: error
          command: yarn
          on_retry_command: rm -rf C:/Users/runneradmin/AppData/Local/node-gyp/

      - name: Install UnPackaged üë®üèª‚Äçüíª
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 600
          max_attempts: 2
          shell: bash
          retry_on: error
          command: yarn unpackaged
          on_retry_command: rm -rf C:/Users/runneradmin/AppData/Local/node-gyp/
      
      - name: Run electron-packager
        run: |
          if ${{ contains(env.MODIFIED_FILE_LIST, 'release.json') }} ; \
          then if ${{ contains(steps.release.outputs.new-tag-name, 'nightly') }} ; \
            then yarn node update-version.js --newTag ${{ steps.unify.outputs.tag-name }} --SHA7 ${{ steps.sha.outputs.sha7 }} --buildTime ${{ steps.vars.outputs.date }} ; \
            else yarn node update-version.js --newTag ${{ steps.unify.outputs.tag-name }} --SHA7 ${{ steps.sha.outputs.sha7 }} --buildTime ${{ steps.vars.outputs.date }} --stable; \
            fi
          else yarn node update-version.js ; \
          fi
          yarn packager
        shell: bash
      
      - name: prepare Snap
        run: |
          sudo apt install snapd
          sudo snap install snapcraft --classic
          sudo snap install multipass --classic

      - name: modify snap config
        run: yarn node snapcraft

      - name: log snapcraft.yaml üì∞
        run: cat snap/snapcraft.yaml
      
      - name: update snap config to public repo üì∞
        run: |
          git config user.name actions-user
          git config user.email action@github.com
          git add .
          git commit -m "${{ steps.sha.outputs.sha7 }} auto update snap config"
          git push