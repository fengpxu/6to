const{ipcRenderer:ipcRenderer}=require("electron"),{existsSync:existsSync,writeFileSync:writeFileSync,readFileSync:readFileSync,mkdirSync:mkdirSync,cpSync:cpSync,statSync:statSync,rmSync:rmSync}=require("fs"),{resolve:resolve,dirname:dirname}=require("path"),WebTorrent=require("webtorrent");import utils from"./webtorrent-utils.js";const{torrentToJson:torrentToJson}=utils,downloadThreshold=3e7,maxWaitTime=6e4,maxTask=5;let maxPreload=20;if("string"===typeof localStorage.getItem("library-max-preload")){const e=Number(localStorage.getItem("library-max-preload"));isNaN(e)||(maxPreload=e)}let storePath="";const preloadClient=new WebTorrent({maxConns:5,downloadLimit:3e6,uploadLimit:3e5}),preloadTasks=new Map,taskQueue=[],previous=[],failures=[];global.preload={client:preloadClient,tasks:preloadTasks,queue:taskQueue};const saveTasks=()=>{if(!storePath)return;existsSync(dirname(storePath))||mkdirSync(dirname(storePath),{recursive:!0});const e=[];for(const[r,t]of preloadTasks.entries())e.push({url:r,...t});writeFileSync(storePath,JSON.stringify(e,null,2))},removeOldIfNeeded=()=>{if(!storePath)return;let e=preloadTasks.size-maxPreload;if(!(e<=0))for(const[r,t]of[...preloadTasks.entries()])if(preloadTasks.delete(r),[t.torrentPath,t.downloadPath].forEach((e=>{"string"===typeof e&&existsSync(e)&&rmSync(e,{recursive:!0})})),console.log("[Preload] Remove old task",r),e--,e<=0)return saveTasks()},queueTask=({url:e,path:r,origin:t,postTitle:o})=>{if(maxPreload<=0)return;if(taskQueue.find((r=>r.url===e)))return console.log("[Preload] Skip existed",e);if(taskQueue.length>=maxTask){const e=taskQueue.shift();if(e){const{url:r,path:t,origin:o,postTitle:s,torrent:a}=e;console.log("[Preload] Remove first old task from queue",r),preloadTasks.has(r)?a.destroy((()=>{})):a.destroy({destroyStore:!0},(()=>{previous.push({url:r,path:t,origin:o,postTitle:s})}))}}let s=!1;const a=preloadClient.add(e,{path:r,storeOpts:{postTitle:o||""},postTitle:o,strategy:"sequential"});taskQueue.push({url:e,path:r,origin:t,postTitle:o,torrent:a});const l=setTimeout((()=>{a.ready||a.destroyed||(console.log("[Preload] Failed to load task",t),ipcRenderer.send("preload-failed",t),a.destroy((()=>{const r=taskQueue.findIndex((r=>r.url===e));if(-1!==r){const[e]=taskQueue.splice(r,1);failures.find((r=>r.origin===e.origin))||failures.push(e)}})))}),maxWaitTime);return a.on("ready",(()=>{if(clearTimeout(l),!a.torrentFile||!a.infoHash)return;const o=resolve(dirname(r),`../torrents/${a.infoHash}.torrent`);existsSync(dirname(o))||mkdirSync(dirname(o),{recursive:!0}),existsSync(o)||writeFileSync(o,a.torrentFile),preloadTasks.has(e)||(preloadTasks.set(e,{downloadPath:r,torrentPath:o,origin:t,torrent:Object.assign(torrentToJson(a),{preloadStatus:1})}),saveTasks())})),a.on("download",(()=>{s||a.downloaded>downloadThreshold&&(s=!0,a.destroy((()=>{console.log("[Preload] Finish preloading",t),removeOldIfNeeded(),ipcRenderer.emit("preload-done",t);const r=taskQueue.findIndex((r=>r.url===e)),o=preloadTasks.get(e);if(o&&(o.torrent=Object.assign(torrentToJson(a),{preloadStatus:2}),saveTasks()),-1!==r&&(taskQueue.splice(r,1),taskQueue.length<maxTask&&previous.length)){const{url:e,path:r,origin:t,postTitle:o}=previous.shift();queueTask({url:e,path:r,origin:t,postTitle:o})}})))})),a};ipcRenderer.on("preload-restore",((e,r)=>{console.log("[Preload] Restore",r);const t=resolve(r,"preload-tasks.json"),o=new Date;o.setDate(o.getDate()-7);const s=o.valueOf();if(existsSync(t)){const e=JSON.parse(readFileSync(t));for(const r of e){if(!existsSync(r.torrentPath))continue;const{mtimeMs:e}=statSync(r.torrentPath);e<s?(rmSync(r.torrentPath),existsSync(r.downloadPath)&&rmSync(r.downloadPath,{recursive:!0})):r.torrent&&r.torrent.downloaded<downloadThreshold?(queueTask({url:r.url,origin:r.origin,path:r.downloadPath,postTitle:r.torrent.postTitle||r.torrent.name}),console.log("[Preload] Restart",r.url)):(console.log("[Preload] Restore",r.url),preloadTasks.set(r.url,r))}console.log(`[Preload] Restore ${e.length} tasks`)}storePath=t})),ipcRenderer.on("preload-task",((e,{url:r,path:t,origin:o,postTitle:s})=>{preloadTasks.has(r)||(console.log("[Preload] Receive task",{url:r,path:t,origin:o,postTitle:s}),queueTask({url:r,path:t,origin:o,postTitle:s}))}));export default{loadCache(e,r){if(preloadTasks.has(e)){const{torrentPath:t,downloadPath:o}=preloadTasks.get(e);return console.log("copy",o,r),cpSync(o,r,{recursive:!0}),t}return null},enable(){maxPreload=40,localStorage.setItem("library-max-preload","40")},disable(){maxPreload=0,localStorage.setItem("library-max-preload","0"),removeOldIfNeeded(),taskQueue.splice(0),preloadTasks.clear()},preloadTasks:preloadTasks,taskQueue:taskQueue,failures:failures};