const throwError=o=>{const r=`Failed to validate app config: ${o}`,t=new Error(r);throw t.stack=t.stack.trim().split("\n")[0],t};module.exports=function(o){o&&"object"===typeof o||throwError("config is not an object");for(const r of["name","displayName","author","developer","description","publisher","homepage","upgradeCode","protocol","shortProtocol"])r in o&&"string"===typeof o[r]||throwError(`config.${r} must be string`);o.name.match(/^[a-zA-Z0-9.\-+]{3,}/)||throwError("config.name should contain at least 3 characters"),o.protocol.match(/^[a-z][a-z0-9.\-+]{2,}/)||throwError("config.protocol should contain at least 3 characters, start with lower-case letter(a-z) and not include upper-case letters"),o.shortProtocol.match(/^[a-z][a-z0-9.\-+]{1,}/)||throwError("config.shortProtocol should contain at least 2 characters, start with lower-case letter(a-z) and not include upper-case letters"),o.name.toLowerCase()===o.shortProtocol&&throwError("config.shortProtocol should not be same as config.name"),o.protocol===o.shortProtocol&&throwError("config.shortProtocol should not be same as config.protocol"),o.protocol===o.shortProtocol&&throwError("config.shortProtocol should not be same as app name"),o.register&&"object"===typeof o.register||throwError("config.register should be object"),"whitelist"===o.register.mode&&(Array.isArray(o.register.list)&&0!==o.register.list.length||throwError('config.register.list should be array with at least one country code since register mode is "whitelist"'))};